/-

LICENSE goes here.

-/

import Steinberg.Macro.Group

namespace Steinberg

class PositiveRootSystem (Root : semiOutParam (Type TΦ))
  extends
    ToString Root
  where
  height : Root → Nat

attribute [height_simps] PositiveRootSystem.height

open PositiveRootSystem

abbrev SingleSpanRootPair (Φ : Type TΦ) [PositiveRootSystem Φ] :=
  (ζ : Φ) × (η : Φ) × (θ : Φ) × ℤ ×' (height θ = height ζ + height η)

abbrev DoubleSpanRootPair (Φ : Type TΦ) [PositiveRootSystem Φ] := (
  (ζ : Φ) × (η : Φ) × (θ₁ : Φ) × (θ₂ : Φ)
  × ℤ × ℤ ×' (height θ₁ = height ζ + height η) ×' (height θ₂ = height ζ + 2 * height η)
)

structure PartialChevalleySystem (Φ : Type TΦ) [PositiveRootSystem Φ] where
  mk ::
  -- autogenerated
  present_roots : Set Φ
  trivial_comm_root_pairs : Set (Φ × Φ)
  single_comm_root_pairs : Set (SingleSpanRootPair Φ)
  double_comm_root_pairs : Set (DoubleSpanRootPair Φ)

-- TODO: make these Finsets, and add sanity check that if the system is 'full', then the three pair sets' sizes
-- should add to the size of present_roots choose 2

end Steinberg
