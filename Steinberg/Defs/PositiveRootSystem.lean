/-
Copyright (c) 2025 The Steinberg Group
Released under the Apache License v2.0; see LICENSE for full text.
-/

import Steinberg.Macro.Group
import Mathlib.Data.Finset.Defs

namespace Steinberg

class PositiveRootSystem (Root : semiOutParam (Type TΦ))
  extends
    ToString Root
  where
  height : Root → Nat

attribute [height_simps] PositiveRootSystem.height

open PositiveRootSystem

abbrev SingleSpanRootPair (Φ : Type TΦ) [PositiveRootSystem Φ] :=
  (ζ : Φ) × (η : Φ) × (θ : Φ) × ℤ ×' (height θ = height ζ + height η)

abbrev DoubleSpanRootPair (Φ : Type TΦ) [PositiveRootSystem Φ] := (
  (ζ : Φ) × (η : Φ) × (θ₁ : Φ) × (θ₂ : Φ)
  × ℤ × ℤ ×' (height θ₁ = height ζ + height η) ×' (height θ₂ = height ζ + 2 * height η)
)

structure PartialChevalleySystem (Φ : Type TΦ) [PositiveRootSystem Φ] where
  mk ::
  -- autogenerated
  presentRoots : Set Φ
  trivialSpanRootPairs : Set (Φ × Φ)
  singleSpanRootPairs : Set (SingleSpanRootPair Φ)
  doubleCommutatorRootPairs : Set (DoubleSpanRootPair Φ)

  h_trivial_valid : ∀ p ∈ trivialSpanRootPairs, p.1 ∈ presentRoots ∧ p.2 ∈ presentRoots
  h_single_valid : ∀ p ∈ singleSpanRootPairs, p.1 ∈ presentRoots ∧ p.2.1 ∈ presentRoots ∧ p.2.2.1 ∈ presentRoots
  h_double_valid : ∀ p ∈ doubleCommutatorRootPairs, p.1 ∈ presentRoots ∧ p.2.1 ∈ presentRoots ∧ p.2.2.1 ∈ presentRoots ∧ p.2.2.2.1 ∈ presentRoots

namespace PartialChevalleySystem

def to_pairs (Φ : Type TΦ) [PositiveRootSystem Φ] (trivialSpanRootPairs : Set (Φ × Φ)) (singleSpanRootPairs : Set (SingleSpanRootPair Φ))
  (doubleCommutatorRootPairs : Set (DoubleSpanRootPair Φ)) : Set (Φ × Φ) :=
  (fun p => (p.1, p.2)) '' trivialSpanRootPairs ∪ (fun p => (p.1, p.2.1)) '' singleSpanRootPairs
    ∪ (fun p => (p.1, p.2.1)) '' doubleCommutatorRootPairs

def every_pair_in_all_pairs (Φ : Type TΦ) [PositiveRootSystem Φ] (trivialSpanRootPairs : Set (Φ × Φ)) (singleSpanRootPairs : Set (SingleSpanRootPair Φ))
  (doubleCommutatorRootPairs : Set (DoubleSpanRootPair Φ)) :=
  ∀ (ζ η : Φ), ζ ≠ η →
   (ζ, η) ∈ to_pairs Φ trivialSpanRootPairs singleSpanRootPairs doubleCommutatorRootPairs
    ∪ Prod.swap '' to_pairs Φ trivialSpanRootPairs singleSpanRootPairs doubleCommutatorRootPairs

def mkFull (Φ : Type TΦ) [PositiveRootSystem Φ]
  (presentRoots : Set Φ) (trivialSpanRootPairs : Set (Φ × Φ)) (singleSpanRootPairs : Set (SingleSpanRootPair Φ))
  (doubleCommutatorRootPairs : Set (DoubleSpanRootPair Φ)) (h_full : ∀ (ζ : Φ), ζ ∈ presentRoots)
  (h_full' : every_pair_in_all_pairs Φ trivialSpanRootPairs singleSpanRootPairs doubleCommutatorRootPairs)
  : PartialChevalleySystem Φ :=
  PartialChevalleySystem.mk presentRoots trivialSpanRootPairs singleSpanRootPairs doubleCommutatorRootPairs (by tauto) (by tauto) (by tauto)

end PartialChevalleySystem

end Steinberg
